{% if product.metafields.custom[block.settings.enable_file_upload].value %}

  <div class="product-file-upload" {{ block.shopify_attributes }}>
    {% if block.settings.instruction_text != blank %}
      <p class="file-upload-instruction" style="font-size: {{ block.settings.instruction_text_size }}px;">
        {{ block.settings.instruction_text }}
      </p>
    {% endif %}
    <div class="file-upload-container">
      <label for="file-upload-{{ block.id }}" class="file-upload-label">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 24 24" stroke="{{block.settings.button_text_color}}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
          <polyline points="17 8 12 3 7 8"/>
          <line x1="12" y1="3" x2="12" y2="15"/>
        </svg>
        {{ block.settings.upload_button_text }}
      </label>
      <div class="file-upload-preview"></div>
    </div>
    <input 
      type="file" 
      form="{{ 'product-form-' | append: section.id }}"
      id="file-upload-{{ block.id }}" 
      name="properties[File Upload]"
      class="file-upload-input" 
      accept="{{ block.settings.allowed_file_types }}"
      data-max-file-size="{{ block.settings.max_file_size | times: 1048576 }}"
      data-allowed-types="{{ block.settings.allowed_file_types | remove: '.' | replace: ',', ' ' }}"
    >
    <div class="file-upload-error"></div>
  </div>
  
  <style>
    .file-upload-instruction {
      margin-bottom: 10px;
      font-size: {{block.settings.instruction_text_size}}px;
    }
  
    .file-upload-container {
      display: flex;
      align-items: center;
      gap: 10px;
      width: 100%;
    }
  
    .file-upload-label {
      background-color: {{block.settings.button_color}};
      color: {{block.settings.button_text_color}};
      padding: {{block.settings.button_padding_vertical}}rem {{block.settings.button_padding_horizontal}}rem;
      border-radius: 50px;
      display: inline-flex;
      align-items: center;
      cursor: pointer;
      font-size: {{block.settings.button_text_size}}px;
      font-weight: 600;
      text-align: center;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      border: none;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      flex-shrink: 0;
    }
    
    .file-upload-label:hover {
      background-color: {{block.settings.button_hover_color}};
      box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.15);
    }
  
    .file-upload-input {
      display: none;
    }
    
    .file-upload-preview {
      flex-grow: 1;
      font-size: 14px;
      color: #555;
      font-style: italic;
      padding: 10px 15px;
      background-color: #f9f9f9;
      border-radius: 5px;
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
      display: none;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .file-upload-error {
      color: #FF5252;
      font-size: 12px;
      margin-top: 5px;
      font-weight: bold;
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const fileUploads = document.querySelectorAll('.file-upload-input');
  
      fileUploads.forEach(function(fileUpload) {
        fileUpload.addEventListener('change', function(event) {
          const file = event.target.files[0];
          const maxFileSize = parseInt(event.target.dataset.maxFileSize);
          const allowedTypes = event.target.dataset.allowedTypes.split(' ');
          const previewElement = event.target.parentElement.querySelector('.file-upload-preview');
          const errorElement = event.target.parentElement.querySelector('.file-upload-error');
  
          errorElement.textContent = '';
          previewElement.style.display = 'none';
          previewElement.innerHTML = '';
  
          if (file) {
            const fileExtension = file.name.split('.').pop().toLowerCase();
            if (!allowedTypes.includes(fileExtension)) {
              errorElement.textContent = `Invalid file type. Allowed types are: ${allowedTypes.join(', ')}`;
              event.target.value = '';
              return;
            }
            
            if (file.size > maxFileSize) {
              errorElement.textContent = `File size exceeds the limit of ${maxFileSize / 1048576}MB.`;
              event.target.value = '';
            } else {
              const fileName = file.name;
              const maxLength = 40;
              let displayName = fileName;
              
              if (fileName.length > maxLength) {
                const start = fileName.substr(0, Math.ceil(maxLength / 2));
                const end = fileName.substr(-Math.floor(maxLength / 2));
                displayName = start + '...' + end;
              }
              
              previewElement.textContent = displayName;
              previewElement.style.display = 'block';
            }
          }
        });
      });
    });
  </script>
{% endif %}